=====================================
Test file for 0-add_integer.py module
=====================================

The module defines a function called ``add_integer(a, b=98)``

import the module
    >>> add_integer = __import__('0-add_integer').add_integer

Numbers
=======

    Integers
    --------

        >>> add_integer(6641916144, 654147646546)
        660789562690

        >>> add_integer(2, 3)
        5

        >>> add_integer(-5, 5)
        0

    Floats
    ------
    Floats are supported but they are first casted to int

        >>> add_integer(5.2, 2.2)
        7

        >>> add_integer(-5.2, -2.2)
        -7

        >>> add_integer(3.6, 15)
        18

    Optional argument
    -----------------
    Notice the second argument is optional (defaults to 98) and can be ommited.

        >>> add_integer(-8)
        90

Non-Numbers
===========

    >>> add_integer('ALX Scholl', 6)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(10, [1, 2, 3])
    Traceback (most recent call last):
    TypeError: b must be an integer

Infinity and NaN
================

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

Missing arguments
=================

    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'